# 1014. Best Sightseeing Pair (same as 121. Best Time to Buy and Sell Stock)
class Solution:
    def maxScoreSightseeingPair(self, values: List[int]) -> int:
        
        res=values[0]+values[1]-1
        ms=values[0]

        for j in range(1,len(values)):         
            res=max(res,ms+values[j]-j)
            ms=max(ms,values[j]+j)
            

        return res

# 122. Best Time to Buy and Sell Stock II
# Greedy
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) <= 1: return 0
        
        greedySolution = 0
        prevPrice = prices[0]
        
        for price in prices:
            if price - prevPrice > 0:
                greedySolution += price - prevPrice     
            
            prevPrice = price
        return greedySolution
        
#dp
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        s=0
        res=0
        m=prices[0]

        for j in range(1,len(prices)):
            m=min(m,prices[j])
            if prices[j]>=prices[j-1]:
                res=max(res,prices[j]-m)
                if j==len(prices)-1:
                    s=s+res
                elif prices[j+1]<prices[j]:
                    s=s+res
                    res=0
                    m=prices[j]
            

        return s



# 70. Climbing Stairs
class Solution:
    def climbStairs(self, n: int) -> int:
        if n==0:
            return 0
        elif n==1:
            return 1
        elif n==2:
            return 2
        
        s=[0]*(n+1)
        s[1]=1
        s[2]=2
        for i in range(3,n+1):
            s[i]=s[i-1]+s[i-2]
        return s[n]


# 746. Min Cost Climbing Stairs
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n=len(cost)
        s=[0]*(n+1)
        for i in range(2,n+1):
            s[i]=min(s[i-2]+cost[i-2], s[i-1]+cost[i-1])
            
        return s[n]

# 198. House Robber
class Solution:
    def rob(self, nums: List[int]) -> int:
        n=len(nums)
        s=[0]*(n+1)
        s[1]=nums[0]
        for i in range(2,n+1):
            s[i]=max(s[i-2]+nums[i-1], s[i-1])
            
        return s[n]


# 213. House Robber II
class Solution:
    def rob(self, nums: List[int]) -> int:
        n=len(nums)
        if n==1:
            return nums[0]
        else:
            return max(self.rob_(nums[:-1]),self.rob_(nums[1:]) )
        
        
    def rob_(self, nums: List[int]) -> int:
        n=len(nums)
        s=[0]*(n+1)
        s[1]=nums[0]
        for i in range(2,n+1):
            s[i]=max(s[i-2]+nums[i-1], s[i-1])
            
        return s[n]




# 375. Guess Number Higher or Lower II
class Solution:
    def getMoneyAmount(self, n: int) -> int:
        dp = [[0] * (n+1) for _ in range(n+1)]
        for i in range(1,n):
            dp[i][i+1] = i
        for low in range(n-1, 0 ,-1):
            for high in range(low+1, n+1):
                dp[low][high] = min(x + max(dp[low][x-1], dp[x+1][high]) for x in range(low,high))	
        return dp[1][n]



# 139. Word Break
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        wordSet = set(wordDict)		    # 变成set可以使查找复杂度降为O(1)
        dp = [False for i in range(len(s)+1)]
        dp[0] = True                    # 预防s==''
        for i in range(1,len(s)+1):
            for j in range(i):
                if dp[j] and s[j:i] in wordSet:
                    dp[i]=True
                    break
        return dp[-1]

# 413. Arithmetic Slices
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        dp = res = 0
        for i in range(2, len(nums)):
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:
                dp += 1
                res += dp
            else:
                dp = 0
        return res
