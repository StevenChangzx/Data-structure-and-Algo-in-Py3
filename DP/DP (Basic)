# 1014. Best Sightseeing Pair (same as 121. Best Time to Buy and Sell Stock)
class Solution:
    def maxScoreSightseeingPair(self, values: List[int]) -> int:
        
        res=values[0]+values[1]-1
        ms=values[0]

        for j in range(1,len(values)):         
            res=max(res,ms+values[j]-j)
            ms=max(ms,values[j]+j)
            

        return res

# 122. Best Time to Buy and Sell Stock II
# Greedy
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) <= 1: return 0
        
        greedySolution = 0
        prevPrice = prices[0]
        
        for price in prices:
            if price - prevPrice > 0:
                greedySolution += price - prevPrice     
            
            prevPrice = price
        return greedySolution
        
#dp
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        s=0
        res=0
        m=prices[0]

        for j in range(1,len(prices)):
            m=min(m,prices[j])
            if prices[j]>=prices[j-1]:
                res=max(res,prices[j]-m)
                if j==len(prices)-1:
                    s=s+res
                elif prices[j+1]<prices[j]:
                    s=s+res
                    res=0
                    m=prices[j]
            

        return s
        
# dp (concise / easy)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit=0
        for i in range(1,len(prices)):
            profit += max(prices[i]-prices[i-1],0)
        return profit



# 70. Climbing Stairs
class Solution:
    def climbStairs(self, n: int) -> int:
        if n==0:
            return 0
        elif n==1:
            return 1
        elif n==2:
            return 2
        
        s=[0]*(n+1)
        s[1]=1
        s[2]=2
        for i in range(3,n+1):
            s[i]=s[i-1]+s[i-2]
        return s[n]


# 746. Min Cost Climbing Stairs
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n=len(cost)
        s=[0]*(n+1)
        for i in range(2,n+1):
            s[i]=min(s[i-2]+cost[i-2], s[i-1]+cost[i-1])
            
        return s[n]

# 198. House Robber
class Solution:
    def rob(self, nums: List[int]) -> int:
        n=len(nums)
        s=[0]*(n+1)
        s[1]=nums[0]
        for i in range(2,n+1):
            s[i]=max(s[i-2]+nums[i-1], s[i-1])
            
        return s[n]


# 213. House Robber II
class Solution:
    def rob(self, nums: List[int]) -> int:
        n=len(nums)
        if n==1:
            return nums[0]
        else:
            return max(self.rob_(nums[:-1]),self.rob_(nums[1:]) )
        
        
    def rob_(self, nums: List[int]) -> int:
        n=len(nums)
        s=[0]*(n+1)
        s[1]=nums[0]
        for i in range(2,n+1):
            s[i]=max(s[i-2]+nums[i-1], s[i-1])
            
        return s[n]




# 375. Guess Number Higher or Lower II
class Solution:
    def getMoneyAmount(self, n: int) -> int:
        dp = [[0] * (n+1) for _ in range(n+1)]
        for i in range(1,n):
            dp[i][i+1] = i
        for low in range(n-1, 0 ,-1):
            for high in range(low+1, n+1):
                dp[low][high] = min(x + max(dp[low][x-1], dp[x+1][high]) for x in range(low,high))	
        return dp[1][n]



# 139. Word Break
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        wordSet = set(wordDict)		    # 变成set可以使查找复杂度降为O(1)
        dp = [False for i in range(len(s)+1)]
        dp[0] = True                    # 预防s==''
        for i in range(1,len(s)+1):
            for j in range(i):
                if dp[j] and s[j:i] in wordSet:
                    dp[i]=True
                    break
        return dp[-1]
        

# 413. Arithmetic Slices
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        dp = res = 0
        for i in range(2, len(nums)):
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:
                dp += 1
                res += dp
            else:
                dp = 0
        return res


# 91 Decode Ways
''' 
same as 70. climb stairs

dp[i] =   dp[i - 1] (s[i - 1] != 0) 
        + dp[i - 2] (i > 1, s[i - 2] != 0, s[i - 2: i] <= 26)
dp[0] = 1
'''
class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        dp0, dp1, dp2 = 0, 1, 0
        for i in range(1, n + 1):
            dp2 = 0
            if s[i - 1] != '0':
                dp2 += dp1          # 1 previous step 
            if i > 1 and s[i - 2] != '0' and int(s[i - 2: i]) <= 26:  # 10 <= int(s[i - 2: i])<=26
                dp2 += dp0          # 2 previous steps 
            dp0, dp1 = dp1, dp2
        return dp2


# 264. Ugly Number II
class Solution:
    def nthUglyNumber(self, n: int) -> int:
        num = [1]
        p2 = p3 = p5 = 0
        for i in range(n):
            tmp = min(num[p2] * 2, num[p3] * 3, num[p5] * 5)
            num.append(tmp)
            if tmp == num[p2] * 2: 
                p2 += 1
            if tmp == num[p3] * 3:
                p3 += 1
            if tmp == num[p5] * 5:
                p5 += 1
        return num[n - 1]


''' image pattern '''


# 96. Unique Binary Search Trees
def numTrees(self, n: int) -> int:
        dp = {0:1, 1:1, 2:2}
        if n < 3: return dp[n]
        for i in range(3, n+1):
            num = 0
            for j in range(i):
                num += dp[j]*dp[i-j-1]
            dp[i] = num
        return dp[n]



# 931. Minimum Falling Path Sum
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        if n == 1:
            return matrix[0][0]
        
        for i in range(1, n):
            for j in range(n):
                if j == 0:
                    matrix[i][j] += min(matrix[i-1][j], matrix[i-1][j+1],)
                elif j == (n-1):
                    matrix[i][j] += min(matrix[i-1][j-1], matrix[i-1][j],)
                else:
                    matrix[i][j] += min(matrix[i-1][j-1], matrix[i-1][j], matrix[i-1][j+1])
        return min(matrix[j])


# 120. Triangle
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        dp=[ [0] * (len(x)+2) for x in triangle]
        
        dp[0][0]=float('inf')
        dp[0][-1]=float('inf')
        dp[0][1]=triangle[0][0]
        
        for i in range(1,len(dp)):
            dp[i][0]=float('inf')
            dp[i][-1]=float('inf')
            for  j in range(1,len(triangle[i])+1):
                dp[i][j] = triangle[i][j-1] + min(dp[i-1][j-1],dp[i-1][j])
                
        return min(dp[-1])


# 62. Unique Paths 

#dp
def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0]*n for _ in range(m)]
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]
        
#math
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        x=m+n-2
        u=s=1
        for i in range(m-1):
            s=s*x
            x-=1
        for i in range(1,m):
            u=u*i
        return int(s/u)
 
# 63. Unique Paths II
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])
        dp = [[0]*n for _ in range(m)]
        for i in range(m):
            if obstacleGrid[i][0]==0:
                dp[i][0] = 1
            else:
                break
        for j in range(n):
            if obstacleGrid[0][j]==0:
                dp[0][j] = 1
            else:
                break
                
        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[i][j]==0:
                    dp[i][j]=dp[i][j-1]+dp[i-1][j]
                    
        return dp[m-1][n-1]
