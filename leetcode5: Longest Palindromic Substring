# 5. Longest Palindromic Substring

# DP
class Solution:
    def longestPalindrome(self, s: str) -> str:
        s = list(s)
        l = len(s)
        dp = [[0] * l for i in range(l)]
        for i in range(l):
            dp[i][i] = True
        # 当 k = 2时要用到
            dp[i][i - 1] = True
        resLeft = 0
        resRight = 0
    # 枚举子串的长度
        for k in range(2, l+1):
        # 子串的起始位置
            for i in range(0, l-k+1):
                j = i + k - 1
                if s[i] == s[j] and dp[i + 1][j - 1]:
                    dp[i][j] = True
                # 保存最长的回文起点和终点
                    if resRight - resLeft + 1 < k:
                        resLeft = i
                        resRight = j
        return ''.join(s[resLeft:resRight+1])
        
 
# Smart Method

class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        maxl = 0
        start = 0
        for i in range(n):
            if i - maxl >= 1 and s[i-maxl-1: i+1] == s[i-maxl-1: i+1][::-1]:
                start = i - maxl - 1
                maxl += 2
                continue
            if i - maxl >= 0 and s[i-maxl: i+1] == s[i-maxl: i+1][::-1]:
                start = i - maxl
                maxl += 1
        return s[start: start + maxl]
