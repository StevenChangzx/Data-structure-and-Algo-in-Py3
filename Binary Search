# 704. Binary Search
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l=0
        r=len(nums)-1
        while l<=r:
            mid=l+(r-l)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                l=mid+1
            else:
                r=mid-1
        return -1



# 278. First Bad Version
 
class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 0 ,n
        while left <= right:
            mid = left + (right - left) // 2
            if not isBadVersion(mid):
                left = mid + 1
            else:
                right = mid - 1
        return left
        
        
# 35. Search Insert Position

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        l,r=0,len(nums)
        while l<r:
            mid=(l+r)//2
            if nums[mid]>=target:
                r=mid
            else:
                l=mid+1
        return l


# 1385. Find the Distance Value Between Two Arrays ï¼ˆ O(nlgn) instead of O(n^2) )

class Solution:
    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:
        arr2.sort()
        c=0
        for i in arr1:
            l=0
            r=len(arr2)-1
            while l<=r:
                m=l+(r-l)//2
                if l==m:
                    if abs(arr2[l]-i)>d and abs(arr2[r]-i)>d:
                        c+=1
                    break
                if arr2[m]>i:
                    if abs(arr2[m]-i)>d:
                        r=m-1
                    else:
                        break
                elif arr2[m]<i:
                    if abs(arr2[m]-i)>d:
                        l=m+1
                    else:
                        break
                else:
                    break
        return c
            
            
# 852. Peak Index in a Mountain Array
class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        l=0
        r=len(arr)-1
        x=max(arr)
        while l<=r:
            if l==r:
                return l
            m=l+(r-l)//2
            if arr[m]<x and arr[m]<arr[m+1]:
                l=m+1
            elif arr[m]==x:
                return m
            else:
                r=m-1
                
 # 69. Sqrt(x)
 class Solution:
    def mySqrt(self, x: int) -> int:
        l=0
        r=x
        while l<=r:
            m=l+(r-l)//2
            if m*m>x:
                r=m-1
                if r*r<x:
                    return r
            elif m*m<x:
                l=m+1
                if l*l>x:
                    return m                  
            else:
                return m

