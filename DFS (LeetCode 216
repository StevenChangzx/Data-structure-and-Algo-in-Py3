# Using different scopes (function inside function) instead of return itself(generator function)
# Permutation

def f(s):
    def Permute(s,tmp):
        if len(s) <= 1:
            res.append(tmp+[s[0]])
        else:
            for i in range(len(s)):
            tmp = tmp + [s[i]]
            subset = s[:i] + s[i+1:]
            Permute(s,tmp)
            tmp.remove(s[i])
    res = []
    Permute(s)
    return res
            



# LeetCode 216 Combination Sum III
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(cur, k, n, tmp):
            if k == 0:
                if n == 0:
                    res.append(tmp[:])
        ''' 
        # end case chose 1 instead 0. also can:
        
            if k == 1:
                if n >= cur and n<=9:
                    tmp.append(n)
                    res.append(tmp[:])
                    tmp.pop()
                    
        '''
                return
            for i in range(cur, 10):
                if i > n:
                    return
                
                tmp.append(i)
                dfs(i + 1, k - 1, n - i, tmp)
                tmp.pop()

        res = []
        dfs(1, k, n, [])
        return res
